>>> Testcase known par = 1.
Saving current emulator state: new with esID 0
Capture 'H-call' (into test|0 + 0)
Processing BB (test|0)
Emulation Static State (esID 0, call depth 0):
  Registers: %rsp (R 0), %rdi (0x1)
  Flags: (none)
  Stack: (none)
Decoding BB test ...
                test:  mov     test+49,%rsi
              test+8:  mov     test+57,%rdi
             test+16:  mov     $0x8,%rcx
             test+23:  rep movsb (%rsi),(%rdi)
             test+25:  mov     $0xaaaa,%rsi
             test+32:  mov     $0xbbbb,%rdi
             test+39:  mov     $0x8,%rcx
             test+46:  rep movsb (%rsi),(%rdi)
             test+48:  ret    
Emulate 'test: mov test+49,%rsi'
Capture 'mov test+49,%rsi' (into test|0 + 1)
Emulate 'test+8: mov test+57,%rdi'
Capture 'mov test+57,%rdi' (into test|0 + 2)
Emulate 'test+16: mov $0x8,%rcx'
Emulate 'test+23: rep movsb (%rsi),(%rdi)'
Capture 'mov $0x8,%rcx' (into test|0 + 3)
Capture 'rep movsb (%rsi),(%rdi)' (into test|0 + 4)
Emulate 'test+25: mov $0xaaaa,%rsi'
Emulate 'test+32: mov $0xbbbb,%rdi'
Emulate 'test+39: mov $0x8,%rcx'
Emulate 'test+46: rep movsb (%rsi),(%rdi)'
Capture 'mov $0x8,%rcx' (into test|0 + 5)
Capture 'mov $0xbbbb,%rdi' (into test|0 + 6)
Capture 'mov $0xaaaa,%rsi' (into test|0 + 7)
Capture 'rep movsb (%rsi),(%rdi)' (into test|0 + 8)
Emulate 'test+48: ret'
Capture 'H-ret' (into test|0 + 9)
Capture 'ret' (into test|0 + 10)
Generating code for BB test|0 (11 instructions)
  I 0 : H-call                           (test|0)+0  
  I 1 : mov     test+49,%rsi             (test|0)+0  
  I 2 : mov     test+57,%rdi             (test|0)+8  
  I 3 : mov     $0x8,%rcx                (test|0)+16 
  I 4 : rep movsb (%rsi),(%rdi)          (test|0)+23 
  I 5 : mov     $0x8,%rcx                (test|0)+25 
  I 6 : mov     $0xbbbb,%rdi             (test|0)+32 
  I 7 : mov     $0xaaaa,%rsi             (test|0)+39 
  I 8 : rep movsb (%rsi),(%rdi)          (test|0)+46 
  I 9 : H-ret                            (test|0)+48 
  I10 : ret                              (test|0)+48 
Generated: 49 bytes (pass1: 75)
BB gen (9 instructions):
                 gen:  mov     0x400ba7,%rsi
               gen+8:  mov     0x400baf,%rdi
              gen+16:  mov     $0x8,%rcx
              gen+23:  rep movsb (%rsi),(%rdi)
              gen+25:  mov     $0x8,%rcx
              gen+32:  mov     $0xbbbb,%rdi
              gen+39:  mov     $0xaaaa,%rsi
              gen+46:  rep movsb (%rsi),(%rdi)
              gen+48:  ret    
